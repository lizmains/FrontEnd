using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;

namespace MauiApp2;

public class BowlingGameViewModel : INotifyPropertyChanged
{
    public BowlingGame game { get; }
    private int currentFrameIndex;
    public ICommand pinButtonCommand { get; private set; }
    public ICommand nextFrameCommand { get; set; }

    // private ObservableCollection<BowlingFrame> frames;
    public ObservableCollection<BowlingFrame> Frames { get; }
    // public ObservableCollection<BowlingFrame> Frames
    // {
    //     get => frames;
    //     set
    //     {
    //         if (frames != value)
    //         {
    //             frames = value;
    //             OnPropertyChanged(nameof(Frames));
    //         }
    //     }
    // }
    
    public int CurrentFrameIndex
    {
        get => currentFrameIndex;
        set
        {
            if (currentFrameIndex != value)
            {
                currentFrameIndex = value;
                OnPropertyChanged(nameof(CurrentFrameIndex));
                OnPropertyChanged(nameof(CurrentFrame));
            }
        }
    }
    
    public BowlingFrame CurrentFrame => Frames[currentFrameIndex];
    
    public ICommand addRollCommand { get; private set; }
    public BowlingGameViewModel()
    {
        game = new BowlingGame();
        Frames = new ObservableCollection<BowlingFrame>();
        for (int i = 0; i < 10; i++)
        {
            Frames.Add(new BowlingFrame());
        }
        currentFrameIndex = 0;
        addRollCommand = new Command<int>(addRoll);
        pinButtonCommand = new Command<int>(HandlePinButtonPress);
        nextFrameCommand = new Command(MoveToNextFrame);
    }
    
    private void HandlePinButtonPress(int pinsLeft)
    {
        // BowlingFrame currentFrame = GetCurrentFrame();
    
        if (!CurrentFrame.FirstRoll.HasValue)
        {
            // If this is the first roll, calculate the score accordingly.
            CurrentFrame.FirstRoll = 10 - pinsLeft;
        }
        else if (!CurrentFrame.SecondRoll.HasValue)
        {
            // If this is the second roll, calculate the score accordingly.
            CurrentFrame.SecondRoll = 10 - pinsLeft;
        }

        CurrentFrame.CalculateScore();
    
        OnPropertyChanged(nameof(Frames));
        
        //move to next frame or roll as needed... idk how to do that figure out later
    }
    
    private void MoveToNextFrame()
    {
        if (currentFrameIndex < game.Frames.Count - 1)
        {
            currentFrameIndex++;
            Console.WriteLine($"CurrentFrameIndex: {currentFrameIndex}");
            Console.WriteLine($"FramecCFI].frameScore {Frames[currentFrameIndex].frameScore}");
        }
        
        else
        {
            //end of game
        }
        OnPropertyChanged(nameof(CurrentFrame));
        OnPropertyChanged(nameof(game));
    }
    
    private BowlingFrame GetCurrentFrame()
    {
        //logic here idk
        BowlingFrame currentFrame = Frames[currentFrameIndex];
        
        return currentFrame;
    }
    
    private void addRoll(int pins)
    {
        var currentFrame = findCurrentFrame();
        currentFrame.addRoll(pins);
        
        OnPropertyChanged(nameof(Frames));
    }
    
    private BowlingFrame findCurrentFrame()
    {
        //logic goes here
        return game.Frames.First(); 
    }
    
    private void updateFrameScore(string pinNum)
    {
        int frameScore = 10;
    
        Frames[1].frameScore = frameScore;
    }
    
    
    public void AddRollToFrame(int frameIndex, int rollIndex, int pinsDown)
    {
        var frame = Frames[frameIndex];

        if (rollIndex == 1)
        {
            frame.FirstRollScore = pinsDown;
        }
        else if (rollIndex == 2)
        {
            frame.SecondRollScore = pinsDown;
        }
    
    }
    
    //this was auto generated by the IDE bc it was mad about the INotifyPropertyChanged thing
    public event PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    
    protected bool SetField<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
        if (EqualityComparer<T>.Default.Equals(field, value)) return false;
        field = value;
        OnPropertyChanged(propertyName);
        return true;
    }
    //end previous notes

    
    
}

