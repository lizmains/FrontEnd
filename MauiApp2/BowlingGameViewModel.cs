using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;
// using Com.Google.Android.Exoplayer2;

namespace MauiApp2;

public class BowlingGameViewModel : INotifyPropertyChanged
{
    private BowlingGame game;
    public ICommand pinButtonCommand { get; private set; }
    public ObservableCollection<BowlingFrame> Frames
    {
        get => new ObservableCollection<BowlingFrame>(game.Frames);
        set => throw new NotImplementedException();
    }

    public ICommand addRollCommand { get; private set; }
    public BowlingGameViewModel()
    {
        game = new BowlingGame();
        Frames = new ObservableCollection<BowlingFrame>(game.Frames);
        addRollCommand = new Command<int>(addRoll);
        pinButtonCommand = new Command<int>(HandlePinButtonPress);
    }

    private void HandlePinButtonPress(int pinsLeft)
    {
        BowlingFrame currentFrame = GetCurrentFrame();

        if (!currentFrame.firstRollPinsLeft.HasValue)
        {
            currentFrame.firstRollPinsLeft = pinsLeft;
        }
        else if (!currentFrame.secondRollPinsLeft.HasValue)
        {
            currentFrame.secondRollPinsLeft = pinsLeft;
        }

        currentFrame.CalculateScore();

        OnPropertyChanged(nameof(game));
        
        //move to next frame or roll as needed...
    }

    private BowlingFrame GetCurrentFrame()
    {
        //fucking logic here idk
        BowlingFrame currentFrame = null;
        
        return currentFrame;
    }

    private void addRoll(int pins)
    {
        var currentFrame = findCurrentFrame();
        currentFrame.addRoll(pins);
        
        OnPropertyChanged(nameof(Frames));
    }

    private BowlingFrame findCurrentFrame()
    {
        //logic goes here
        return game.Frames.First();
    }
    
    //this was auto generated by the IDE bc it was mad about the INotifyPropertyChanged thing
    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    protected bool SetField<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
        if (EqualityComparer<T>.Default.Equals(field, value)) return false;
        field = value;
        OnPropertyChanged(propertyName);
        return true;
    }
    //end previous notes
    
    //update scores n frame shit here later
    private void updateFrameScore(string pinNum)
    {
        int frameScore = 10;

        Frames[1].frameScore = frameScore;
    }
    
}